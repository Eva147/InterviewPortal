@model List<InterviewPortal.Models.Position>
@{
    ViewBag.Title = "Manage Positions";
    var allTopics = ViewBag.AllTopics as List<InterviewPortal.Models.Topic>;
}

@section Styles {
    <link rel="stylesheet" href="~/css/positions-dashboard.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
}

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">@TempData["Message"]</div>
}
<title>Manage Positions</title>
<div class="container">
    <h1>Positions</h1>
    <div class="button-wrapper">
        <!-- Create Position Button -->
        <button class="btn btn-success add-btn" data-bs-toggle="modal" data-bs-target="#createPositionModal">Add Position</button>

        <!-- Create Topic Button -->
        <button class="btn btn-success add-btn" data-bs-toggle="modal" data-bs-target="#createTopicModal">Add Topic</button>
    </div>
    
    @foreach (var position in Model)
    {
        <div class="card mb-4 shadow-sm">
            <div class="card-body">
                <div class="position-name-wrapper">
                    <div>
                        <span class="status @(position.IsActive ? "active" : "archived")">
                            @(position.IsActive ? "Active" : "Archived")
                        </span>
                        <h3 class="card-title mb-0"> @position.Name</h3>
                    </div>
                    <div class="position-actions">
                        <button class="btn button-edit" data-bs-toggle="modal" data-bs-target="#editPositionModal_@position.Id">Edit</button>
                        @if (position.IsActive)
                        {
                            <form asp-action="TogglePositionStatus" asp-controller="Position" method="post" class="d-inline">
                                <input type="hidden" name="id" value="@position.Id" />
                                <input type="hidden" name="isActive" value="false" />
                                <button type="submit" class="btn archive-btn">Archive</button>
                                @Html.AntiForgeryToken()
                            </form>
                        }
                        else
                        {
                            <form asp-action="TogglePositionStatus" asp-controller="Position" method="post" class="d-inline">
                                <input type="hidden" name="id" value="@position.Id" />
                                <input type="hidden" name="isActive" value="true" />
                                <button type="submit" class="btn activate-btn">Activate</button>
                                @Html.AntiForgeryToken()
                            </form>
                        }
                    </div>
                </div>
                <!-- Topics -->
                <h5 class="mt-2">Topics:</h5>
                @foreach (var pt in position.PositionTopics)
                {
                    <div class="border p-2 mb-2 rounded">
                        <div class="header-wrapper">
                            <div class="topic-name">@pt.Topic?.Name</div>
                            <button class="btn button-edit" data-bs-toggle="modal" data-bs-target="#editTopicModal_@pt.Topic?.Id">Edit Topic</button>
                        </div>

                        <ul>
                            @foreach (var q in pt.Topic?.Questions ?? Enumerable.Empty<Question>())
                            {
                                <li class="question-wrapper">
                                    <div class="diff-wrapper">
                                        <div class="difficulty-badge @(q.Difficulty.ToString().ToLower())-badge"></div>
                                        <div><strong>@q.QuestionText</strong></div>
                                        <form asp-action="DeleteQuestion" asp-controller="Question" method="post" class="d-inline delete-question-form">
                                            <input type="hidden" name="questionId" value="@q.Id" />
                                            <button type="submit" class="text-danger btn-icon-only"
                                                    onclick="return confirm('Are you sure you want to delete this question?')">
                                                <i class="fa-solid fa-trash" style="font-size: 1rem;"></i>
                                            </button>
                                            @Html.AntiForgeryToken()
                                        </form>
                                    </div>
                                    <ul>
                                        @foreach (var a in q.Answers)
                                        {
                                            if (a.IsCorrect)
                                            {
                                                <li><span class="attention-text"><strong>Correct A:</strong></span> @a.AnswerText</li>
                                            }
                                            else
                                            {
                                                <li><strong>A:</strong> @a.AnswerText</li>
                                            }
                                        }
                                    </ul>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    }

    @await Html.PartialAsync("_PositionsModals", Model)

    @section Scripts {
        <script>
            // Global variables
            let questionCounter = 0;
            let answerCounters = {};

            // Add new question to create topic form
            function addQuestion() {
                questionCounter++;
                const questionIndex = questionCounter;
                answerCounters[questionIndex] = 0;

                const questionHTML = `
                    <div class="question-block border p-2 mb-2">
                        <label>Question:</label>
                        <input class="form-control mb-2" name="Questions[${questionIndex}]" required />

                        <label>Difficulty Level:</label>
                        <select class="form-select mb-2" name="Difficulty[${questionIndex}]">
                            <option value="0">Easy</option>
                            <option value="1">Medium</option>
                            <option value="2">Hard</option>
                        </select>

                        <label>Answers (select one correct answer):</label>
                        <div id="answersContainer_${questionIndex}">
                            <div class="input-group mb-1">
                                <div class="input-group-text">
                                    <input type="checkbox" class="form-check-input answer-checkbox"
                                           data-question="${questionIndex}" name="IsCorrect[${questionIndex}][0]"
                                           value="true" checked />
                                </div>
                                <input class="form-control" name="Answers[${questionIndex}][0]" placeholder="Enter answer" required />
                            </div>
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-secondary mt-1"
                                onclick="addAnswer(${questionIndex})">+ Add Answer</button>
                    </div>`;

                document.getElementById("questionContainer").insertAdjacentHTML('beforeend', questionHTML);
            }

            // Handle adding a new answer to a question
            function addAnswer(questionIndex) {
                if (!answerCounters[questionIndex]) {
                    answerCounters[questionIndex] = 0;
                }
                answerCounters[questionIndex]++;
                const answerIndex = answerCounters[questionIndex];

                const answerHTML = `
                    <div class="input-group mb-1">
                        <div class="input-group-text">
                            <input type="checkbox" class="form-check-input answer-checkbox"
                                   data-question="${questionIndex}" name="IsCorrect[${questionIndex}][${answerIndex}]"
                                   value="true" />
                        </div>
                        <input class="form-control" name="Answers[${questionIndex}][${answerIndex}]" placeholder="Enter answer" required />
                        <button type="button" class="btn btn-outline-danger delete-answer">×</button>
                    </div>`;

                document.getElementById(`answersContainer_${questionIndex}`).insertAdjacentHTML('beforeend', answerHTML);
            }

            // Add a new question to an edit form
            function addNewQuestion(topicId) {
                const container = document.getElementById(`newQuestionContainer_${topicId}`);
                const questionIndex = document.querySelectorAll('.question-block').length;

                const questionHTML = `
                    <div class="question-block border p-2 mb-2" data-question-index="${questionIndex}">
                        <input type="hidden" name="Questions[${questionIndex}].Id" value="0" />
                        <div class="d-flex justify-content-between mb-2">
                            <input class="form-control mb-2" name="Questions[${questionIndex}].QuestionText"
                                   placeholder="Question text" required />
                            <select class="form-select ms-2" style="width:150px" name="Questions[${questionIndex}].Difficulty">
                                <option value="0">Easy</option>
                                <option value="1">Medium</option>
                                <option value="2">Hard</option>
                            </select>
                        </div>
                        <div class="answers-container">
                            <div class="input-group mb-2">
                                <div class="input-group-text">
                                    <input type="radio" name="Questions[${questionIndex}].CorrectAnswerIndex"
                                           value="0" checked class="form-check-input" />
                                </div>
                                <input type="hidden" name="Questions[${questionIndex}].Answers[0].Id" value="0" />
                                <input type="text" class="form-control" name="Questions[${questionIndex}].Answers[0].AnswerText"
                                       placeholder="Answer text" required />
                            </div>
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-secondary add-new-answer"
                                data-question-index="${questionIndex}">
                            + Add Answer
                        </button>
                    </div>
                `;

                container.insertAdjacentHTML('beforeend', questionHTML);
            }

            // Add a new answer to an existing or new question in edit form
            function addNewAnswer(questionIndex, event) {
                const clickedButton = event ? event.target.closest('.add-answer') : null;

                // Find the question block
                let questionBlock = clickedButton ? clickedButton.closest('.question-block') : null;

                if (!questionBlock) {
                    questionBlock = document.querySelector(`.question-block[data-question-index="${questionIndex}"]`) ||
                                    document.querySelectorAll('.question-block')[questionIndex];
                }

                if (!questionBlock) {
                    console.error("Question block not found for index:", questionIndex);
                    return;
                }

                const answersContainer = questionBlock.querySelector('.answers-container');
                if (!answersContainer) {
                    console.error("Answers container not found in question block");
                    return;
                }

                const answerCount = answersContainer.querySelectorAll('.answer-wrapper').length;

                const answerHTML = `
                    <div class="input-group mb-2 answer-wrapper">
                        <div class="input-wrapper">
                            <input type="radio" name="Questions[${questionIndex}].CorrectAnswerIndex"
                                   value="${answerCount}" class="form-check-input check" />
                        </div>
                        <input type="hidden" name="Questions[${questionIndex}].Answers[${answerCount}].Id" value="0" />
                        <input type="text" class="form-control form-input" name="Questions[${questionIndex}].Answers[${answerCount}].AnswerText"
                               placeholder="Answer text" required />
                        <button type="button" class="delete-answer text-danger btn-icon-only">
                            <i class="fa-solid fa-trash" style="font-size: 1rem; pointer-events: none;"></i>
                        </button>
                    </div>
                `;
                answersContainer.insertAdjacentHTML('beforeend', answerHTML);
            }

            document.addEventListener('click', function(e) {
                // Delete an answer
                if (e.target.classList.contains('delete-answer') || e.target.classList.contains('delete-edit-answer')) {
                        const inputGroup = e.target.closest('.input-group');
                        inputGroup.remove();
                }

                // Delete a question
                if (e.target.classList.contains('delete-question')) {
                    if (confirm('Are you sure you want to delete this question?')) {
                        const questionBlock = e.target.closest('.question-block');
                        questionBlock.remove();
                    }
                }

                // For existing questions in edit form
                if (e.target.classList.contains('add-answer')) {
                    const questionIndex = e.target.getAttribute('data-question-index');
                    addNewAnswer(questionIndex, e);
                }

                // For new questions in edit modal
                if (e.target.classList.contains('add-new-answer')) {
                    const questionIndex = e.target.getAttribute('data-question-index');
                    addNewAnswer(questionIndex, e);
                }
            });

            // Handle radio button selection for correct answers
            document.addEventListener('change', function(e) {
                // Make checkboxes mutually exclusive within their question group for create topic form
                if (e.target.classList.contains('answer-checkbox')) {
                    const questionId = e.target.dataset.question;
                    const allCheckboxes = document.querySelectorAll(`.answer-checkbox[data-question="${questionId}"]`);

                    allCheckboxes.forEach(checkbox => {
                        if (checkbox !== e.target) {
                            checkbox.checked = false;
                        }
                    });
                }

                // Handle radio buttons in edit forms to update hidden fields
                if (e.target.type === 'radio' && e.target.name.includes('CorrectAnswerIndex')) {
                    // Already handled by native radio button behavior
                }
            });

            // Initialise on page load
            document.addEventListener('DOMContentLoaded', function() {
                questionCounter = 0;
                answerCounters = {0: 0};  // Initialise for the first question

                // Reset modal contents when hidden
                const createTopicModal = document.getElementById('createTopicModal');
                if (createTopicModal) {
                    createTopicModal.addEventListener('hidden.bs.modal', function() {
                        resetCreateTopicModal();
                    });
                }

                // Process edit form submissions to ensure correct answers are properly set
                const editForms = document.querySelectorAll('form[id^="editTopicForm_"]');
                editForms.forEach(form => {
                    form.addEventListener('submit', function(e) {
                        // For each question, get the selected radio button and update the hidden field
                        const questions = this.querySelectorAll('.question-block');
                        questions.forEach((questionBlock, qIndex) => {
                            const selectedRadio = questionBlock.querySelector('input[type="radio"]:checked');
                            if (selectedRadio) {
                                const correctIndex = selectedRadio.value;

                                // Find or create the hidden field for this question's correct answer
                                let hiddenField = questionBlock.querySelector(`input[name="Questions[${qIndex}].CorrectAnswerIndex"]`);
                                if (!hiddenField) {
                                    // Create it if not found
                                    hiddenField = document.createElement('input');
                                    hiddenField.type = 'hidden';
                                    hiddenField.name = `Questions[${qIndex}].CorrectAnswerIndex`;
                                    questionBlock.appendChild(hiddenField);
                                }

                                // Set the value
                                hiddenField.value = correctIndex;

                                // set IsCorrect for each answer
                                const answerInputs = questionBlock.querySelectorAll('.answers-container .input-group');
                                answerInputs.forEach((answerInput, aIndex) => {
                                    // Create hidden field for IsCorrect
                                    const isCorrectField = document.createElement('input');
                                    isCorrectField.type = 'hidden';
                                    isCorrectField.name = `Questions[${qIndex}].Answers[${aIndex}].IsCorrect`;
                                    isCorrectField.value = (aIndex.toString() === correctIndex) ? 'true' : 'false';
                                    answerInput.appendChild(isCorrectField);
                                });
                            }
                        });
                    });
                });
            });

            // Reset the create topic modal when closed
            function resetCreateTopicModal() {
                const container = document.getElementById("questionContainer");
                container.innerHTML = `
                    <div class="question-block border p-2 mb-2">
                        <label>Question:</label>
                        <input class="form-control mb-2" name="Questions[0]" required />
                        <label>Difficulty Level:</label>
                        <select class="form-select mb-2" name="Difficulty[0]">
                            <option value="0">Easy</option>
                            <option value="1">Medium</option>
                            <option value="2">Hard</option>
                        </select>
                        <label>Answers (select one correct answer):</label>
                        <div id="answersContainer_0">
                            <div class="input-group mb-1">
                                <div class="input-group-text">
                                    <input type="checkbox" class="form-check-input answer-checkbox"
                                           data-question="0" name="IsCorrect[0][0]"
                                           value="true" checked aria-label="Is answer correct?" />
                                </div>
                                <input class="form-control" name="Answers[0][0]" placeholder="Enter answer" required />
                            </div>
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-secondary mt-1"
                                onclick="addAnswer(0)">+ Add Answer</button>
                    </div>
                `;
                questionCounter = 0;
                answerCounters = {0: 0};

                // Reset the position dropdown
                const positionSelect = document.querySelector('#createTopicModal select[name="PositionId"]');
                if (positionSelect) {
                    positionSelect.selectedIndex = 0;
                }
            }
        </script>
    }
</div>