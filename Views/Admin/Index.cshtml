@inject UserManager<InterviewPortal.Models.User> _userManager;

@section Styles {
    <link rel="stylesheet" href="~/css/users-dashboard.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
}

@{
    var users = ViewData["Users"] as List<InterviewPortal.Models.User> ?? new List<InterviewPortal.Models.User>();
    var roles = ViewData["Roles"] as List<string> ?? new List<string>();
    var search = ViewData["Search"] as string ?? "";
    var roleFilter = ViewData["RoleFilter"] as string ?? "";
    var sortOrder = ViewData["SortOrder"] as string ?? "";

    var currentUser = await _userManager.GetUserAsync(User);
    var currentUserRoles = currentUser != null ? await _userManager.GetRolesAsync(currentUser) : new List<string>();
}

<div class="container">
    <h1>Users</h1>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Create Button -->
    <div class="mb-3">
        <a href="#createUserModal" class="btn btn-success" data-bs-toggle="modal">
            <i class="bi bi-plus-circle"></i> Add User
        </a>
    </div>

    <!-- Search & Filter -->
    <div class="filter-form mb-3">
        <input type="text" id="searchInput" value="@search" placeholder="Search by name or email..." />

        <select id="roleFilterSelect">
            <option value="">All Roles</option>
            @foreach (var role in roles)
            {
                if (role == roleFilter)
                {
                    <option value="@role" selected>@role</option>
                }
                else
                {
                    <option value="@role">@role</option>
                }
            }
        </select>
    </div>

    <!-- User Table -->
    <div class="table-responsive">
        <table class="table table-custom">
            <thead>
                <tr>
                    <th class="sortable-column">
                        <a href="javascript:void(0)" id="sortByName">
                            Name @(sortOrder == "name_asc" ? "▲" : sortOrder == "name_desc" ? "▼" : "")
                        </a>
                    </th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="usersTableBody">
                @await Html.PartialAsync("_UsersTablePartial", users)
            </tbody>
        </table>
        <div id="noResultsMessage" class="no-results @(users.Any() ? "d-none" : "")">
            No users found.
        </div>
    </div>
</div>

<!-- Create User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="CreateUser" method="post">
                <div class="modal-header">
                    <h5 class="modal-title">Create New User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">First Name</label>
                        <input type="text" name="firstName" class="form-control" placeholder="First Name" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Last Name</label>
                        <input type="text" name="lastName" class="form-control" placeholder="Last Name" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" name="email" class="form-control" placeholder="Email" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <input type="password" name="password" class="form-control" placeholder="Password" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- User Modals will be dynamically loaded here -->
<div id="userModalsContainer">
    @foreach (var user in users)
    {
        <partial name="_UserModalsPartial" model="user" />
    }
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const searchInput = document.getElementById("searchInput");
            const roleSelect = document.getElementById("roleFilterSelect");
            const sortNameBtn = document.getElementById("sortByName");
            const tableBody = document.getElementById("usersTableBody");
            const noResultsMessage = document.getElementById("noResultsMessage");
            const userModalsContainer = document.getElementById("userModalsContainer");

            let currentSortOrder = "@sortOrder" || "name_asc";

            // Client-side filtering
            function filterUsers() {
                let visibleCount = 0;
                const searchTerm = searchInput.value.toLowerCase().trim();
                const roleFilter = roleSelect.value.toLowerCase();
                const rows = Array.from(tableBody.querySelectorAll('tr'));

                rows.forEach(row => {
                    const name = row.cells[0].textContent.toLowerCase();
                    const email = row.cells[1].textContent.toLowerCase();
                    const roles = row.cells[2].textContent.toLowerCase();

                    const matchesSearch = name.includes(searchTerm) || email.includes(searchTerm);
                    const matchesRole = !roleFilter || roles.includes(roleFilter);

                    const isVisible = matchesSearch && matchesRole;
                    row.classList.toggle('d-none', !isVisible);

                    if (isVisible) visibleCount++;
                });

                // Show/hide "No users found" message
                noResultsMessage.classList.toggle('d-none', visibleCount > 0);
            }

            // Server-side filtering
            async function loadFilteredUsers() {
                const searchTerm = searchInput.value.trim();
                const roleFilter = roleSelect.value;

                try {
                    const response = await fetch(`/Admin/Index?search=${encodeURIComponent(searchTerm)}&roleFilter=${encodeURIComponent(roleFilter)}&sortOrder=${currentSortOrder}`);
                    if (!response.ok) throw new Error('Network response was not ok');
                    const html = await response.text();

                    // Extract the table body content from the response
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newTableBody = doc.querySelector('#usersTableBody');
                    const newModals = doc.querySelector('#userModalsContainer');

                    if (newTableBody) {
                        tableBody.innerHTML = newTableBody.innerHTML;
                    }

                    if (newModals) {
                        userModalsContainer.innerHTML = newModals.innerHTML;
                    }

                    // Update "No results" message
                    const userRows = tableBody.querySelectorAll('tr');
                    noResultsMessage.classList.toggle('d-none', userRows.length > 0);

                } catch (error) {
                    console.error('Error fetching filtered users:', error);
                }
            }

            // Debounce function
            function debounce(func, delay) {
                let timer;
                return function() {
                    clearTimeout(timer);
                    timer = setTimeout(() => func.apply(this, arguments), delay);
                };
            }

            // Toggle sort order and reload
            sortNameBtn.addEventListener('click', function() {
                currentSortOrder = currentSortOrder === "name_asc" ? "name_desc" : "name_asc";
                loadFilteredUsers();
            });

            // Use client-side filtering for faster response
            searchInput.addEventListener('input', debounce(loadFilteredUsers, 300));
            roleSelect.addEventListener('change', loadFilteredUsers);

            // Initialize
            filterUsers();
        });
    </script>
}